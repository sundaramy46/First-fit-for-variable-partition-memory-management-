#include<stdio.h>
int main() {
    // Declare Variables
    int nb,blockSize[100],n,jobSize[100],i,j,alloc[100];
int a=0;
    //Input initial values
    printf("Enter the number of available memory blocks: ");
    scanf("%d",&nb);
    printf("Enter the size of each memory block: \n");
    for(i=0;i<nb;i++) {
        printf("Size of block%d: ",i+1);
        scanf("%d",&blockSize[i]);
    }

    printf("Enter the number of processes: ");
    scanf("%d",&n);
    printf("Enter the size of each process: \n");
    for(i=0;i<n;i++) {
        printf("Size of process%d: ",i+1);
        scanf("%d",&jobSize[i]);
    }

    // Put initial values in alloc vector
    for(i=0;i<n;i++) {
        alloc[i] = -1;
    }

    // Allocate the processes
    int flag1[n];
    for(i=0;i<n;i++)
    {
        flag1[i]=0;
    }
    int flag2[n];
    for(i=0;i<n;i++)
    {
        flag2[i]=0;
    }
      int diff[nb],k;
      int m;
      int t=0;
      int all[nb];
    for(i=0;i<n;i++){
        for(j=0;j<nb;j++) {
            for (k=0;k<nb;k++)
            {if (blockSize[j]>jobSize[i])
               
               { diff[k]=blockSize[j]-jobSize[i];
                
                all[k]=j;
               }
            }
            
          int  smallest = diff[0];
        
        for (m = 0; m <nb; m++) 
        {
		if (smallest > diff[m])
			
			{
			    smallest = diff[m];
			    int t=m;
			}
			
	    }
        }
        
	    j=all[t];
            
        
        if(blockSize[j]>=jobSize[i] && blockSize[j]>0 && flag1[i]==0) {
              
                
                alloc[i]=j;
                flag1[i]=1;
                flag2[j]=1;
                blockSize[j]=blockSize[j]-jobSize[i];
                
            }
        
    }
    int exter=0;
    int internfrag=0;
    int not_all_pr_sum=0;
    for(i=0;i<nb;i++)
    {
        if(flag2[i]==1 )
        {
            internfrag=internfrag+blockSize[i];
        }
        if(flag2[i] ==0)
        {
            exter=exter+blockSize[i];
        }
    }
    for (i=0;i<n;i++)
    {
        if(flag1[i]==0)
        {  
            not_all_pr_sum=not_all_pr_sum+jobSize[i];
            
        }
    }
   
    

    // Print the results
    printf("\nProcess P of {size} is allocated to block \n\n");
    for(i=0;i<n;i++) {
        if(alloc[i]!=-1)
            printf("Process %d of %d --> Block %d\n",i+1,jobSize[i],alloc[i]+1);
        else
            printf("Process %d of %d --> is not allocated \n",i+1,jobSize[i]);
    }
    printf("***************************************************\n");
     printf("Internal fragments:%d\n",internfrag);
     
    
     
     if(exter>not_all_pr_sum)
    {
        printf("External fragmentation: %d\n",not_all_pr_sum);
    }
    else
    { 
     printf("NO external fragmentation");
    }
}
